{"version":3,"sources":["logo.svg","constants/navigation.js","navigationOptions.js","navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NAVIGATION_SELECTIONS","styles","makeStyles","hoverNavigation","borderBottom","selectedNavigation","typographyStyle","flex","color","noFontWeight","fontWeight","NavigationOptions","classes","map","option","style","to","Box","component","Typography","variant","className","alignSelf","pt","appBarStyle","backgroundColor","paddingBottom","Navigation","display","flexDirection","height","width","pb","AppBar","position","justifyContent","alignItems","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iLAAAA,EAAOC,QAAU,IAA0B,kC,oLCG9BC,EAAwB,CAHhB,QACC,UCUhBC,EAASC,YAAW,CACtBC,gBAAiB,CACb,UAAW,CACPC,aAAc,sBAGtBC,mBAAoB,CAChBD,aAAc,uBAElBE,gBAAiB,CACbC,KAAM,EACN,eAAgB,OAChBC,MAAO,WAEXC,aAAc,CACVC,WAAY,OAgCLC,EA5BW,SAAC,GACpB,eACH,IAAMC,EAAUX,IAEhB,OAAOY,cAAIb,GAAuB,SAACc,GAC/B,OACI,4BAEI,kBAAC,IAAD,CACIC,MAAO,CAAC,eAAkB,QAC1BC,GAAI,IAAIF,GAER,kBAACG,EAAA,EAAD,CACIC,UAAWC,IACXC,QAAQ,KACRZ,MAAM,UACNa,UAAS,UAAKT,EAAQN,gBAAb,YAAgCM,EAAQH,cACjDa,UAAU,SACVC,GAAI,GAEHT,SCtCnBb,EAASC,YAAW,CACtBsB,YAAa,CACTC,gBAAiB,QACjBC,cAAe,QAEnBvB,gBAAiB,CACb,UAAW,CACPC,aAAc,sBAGtBC,mBAAoB,CAChBD,aAAc,mBAElBE,gBAAiB,CACbC,KAAM,EACN,eAAgB,OAChBC,MAAO,WAEXC,aAAc,CACVC,WAAY,OAkELiB,EA9DI,SAAC,GAEb,eACH,IAAMf,EAAUX,IAChB,OACA,kBAACgB,EAAA,EAAD,CACIW,QAAQ,OACRC,cAAc,SACdC,OAAO,OACPC,MAAM,QAEN,kBAAC,IAAD,KACI,kBAACd,EAAA,EAAD,CACIe,GAAI,IAEJ,kBAACC,EAAA,EAAD,CACIC,SAAS,QACTb,UAAWT,EAAQY,aAEnB,kBAACP,EAAA,EAAD,CACIW,QAAQ,OACRO,eAAe,eACfC,WAAW,UAEX,kBAACnB,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,CACIC,UAAWC,IACXC,QAAQ,KACRZ,MAAM,UACNa,UAAS,UAAKT,EAAQN,gBAAb,YAAgCM,EAAQH,cACjDa,UAAU,SACVC,GAAI,GANR,gBAWJ,kBAACN,EAAA,EAAD,CACIW,QAAQ,OACRQ,WAAW,UAEX,wBACIrB,MAAO,CAAC,QAAU,OAAQ,cAAiB,OAAQ,WAAc,WAEjE,kBAAC,EAAD,WAOpB,kBAACE,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoB,KAAK,WAEZ,kBAAC,IAAD,CAAOA,KAAK,iBC9EjBC,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.adb97aba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const ABOUT = 'about';\nexport const RESUME = 'resume';\n\nexport const NAVIGATION_SELECTIONS = [\n    ABOUT,\n    RESUME\n];","import React from 'react';\nimport { map } from 'lodash';\nimport {\n    Link\n} from \"react-router-dom\";\n\nimport { Box, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { NAVIGATION_SELECTIONS } from './constants/navigation';\n\nconst styles = makeStyles({\n    hoverNavigation: {\n        \"&:hover\": {\n            borderBottom: '#FF7E6B solid 3px'\n        }\n    },\n    selectedNavigation: {\n        borderBottom: 'burlywood solid 3px'\n    },\n    typographyStyle: {\n        flex: 1,\n        'padding-left': '50px',\n        color: '#FF7E6B'\n    },\n    noFontWeight: {\n        fontWeight: 100\n    }\n});\n\nconst NavigationOptions = ({\n}) => {\n    const classes = styles();\n\n    return map(NAVIGATION_SELECTIONS, (option) => {\n        return (\n            <li\n            >\n                <Link\n                    style={{'textDecoration': 'none'}}\n                    to={'/'+option}\n                >\n                    <Box\n                        component={Typography}\n                        variant='h6'\n                        color='primary'\n                        className={`${classes.typographyStyle} ${classes.noFontWeight}`}\n                        alignSelf='center'\n                        pt={2}\n                    >\n                        {option}\n                    </Box>\n                </Link>\n            </li>\n        );\n    })\n}\n\nexport default NavigationOptions;\n","import React, {useEffect, useState} from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n  } from \"react-router-dom\";\n\nimport { Box, Typography, AppBar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NavigationOptions from './navigationOptions.js';\n\n\nconst styles = makeStyles({\n    appBarStyle: {\n        backgroundColor: 'black',\n        paddingBottom: '20px'\n    },\n    hoverNavigation: {\n        \"&:hover\": {\n            borderBottom: '#FF7E6B solid 3px'\n        }\n    },\n    selectedNavigation: {\n        borderBottom: 'black solid 3px'\n    },\n    typographyStyle: {\n        flex: 1,\n        'padding-left': '50px',\n        color: '#FF7E6B'\n    },\n    noFontWeight: {\n        fontWeight: 100\n    }\n});\n\nconst Navigation = ({\n\n}) => {\n    const classes = styles();\n    return(\n    <Box\n        display='flex'\n        flexDirection='column'\n        height='100%'\n        width='100%'\n    >\n        <Router>\n            <Box\n                pb={10}\n            >\n                <AppBar\n                    position='fixed'\n                    className={classes.appBarStyle}\n                >\n                    <Box\n                        display='flex'\n                        justifyContent='space-around'\n                        alignItems='center'\n                    >\n                        <Box>\n                            <Box\n                                component={Typography}\n                                variant='h6'\n                                color='primary'\n                                className={`${classes.typographyStyle} ${classes.noFontWeight}`}\n                                alignSelf='center'\n                                pt={2}\n                            >\n                                ernest lian\n                            </Box>\n                        </Box>\n                        <Box\n                            display='flex'\n                            alignItems='center'\n                        >\n                            <ul\n                                style={{'display':'flex', 'listStyleType': 'none', 'alignItems': 'center'}}\n                            >\n                                <NavigationOptions/>\n                            </ul>\n                        </Box>\n                    </Box>\n                </AppBar>\n            </Box>\n\n            <Box>\n                <Switch>\n                    <Route path=\"/about\">\n                    </Route>\n                    <Route path=\"/resume\">\n                    </Route>\n                </Switch>\n            </Box>\n        </Router>\n    </Box>);\n}\n\nexport default Navigation;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navigation from './navigation.js';\n\nfunction App() {\n  return (\n    <Navigation/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}